{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.js","utils/validators/validators.js","components/Login/Login.jsx"],"names":["module","exports","FormsControl","input","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","restProps","Input","CreateField","placeholder","name","validators","component","text","validate","required","value","maxLengthCreator","maxLength","length","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","type","style","formSummaryError","connect","state","isAuth","auth","login","to","formData","email","password","rememberMe"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,+LCGrHC,EAAe,SAAC,GAAgD,EAA9CC,MAA+C,IAAD,IAAvCC,KAAOC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,MAAQC,EAAe,EAAfA,SAC7CC,EAAWH,GAAWC,EAC5B,OACI,yBAAKG,UAAWC,IAAOC,YAAc,KAAOH,EAAWE,IAAOJ,MAAQ,KAClE,6BACKC,GAEJC,GAAY,mDAAkBF,GAAlB,OAKZM,EAAW,SAACC,GAAW,IACxBV,EAA8BU,EAA9BV,MAAgBW,GAAcD,EAAvBT,KADgB,YACOS,EADP,mBAE/B,OAAO,kBAACX,EAAiBW,EAAlB,IAA0B,8CAAcC,EAAeX,IAAvD,MAGEY,EAAQ,SAACF,GAAW,IACrBV,EAA8BU,EAA9BV,MAAgBW,GAAcD,EAAvBT,KADa,YACUS,EADV,mBAE5B,OAAO,kBAACX,EAAiBW,EAAlB,IAA0B,2CAAWC,EAAeX,IAApD,MAGEa,EAAc,SAACC,EAAaC,EAAMC,EAAYC,GAAhC,IAA2CP,EAA3C,uDAAiD,GAAIQ,EAArD,uDAA0D,GAA1D,OACvB,6BACI,kBAAC,IAAD,eAAOJ,YAAaA,EAAaC,KAAMA,EACnCI,SAAUH,EACVC,UAAWA,GACPP,IAJZ,IAIuBQ,K,iCC/B3B,oEAAO,IAAME,EAAW,SAAAC,GACpB,IAAIA,EACJ,MAAO,qBAIEC,EAAmB,SAAAC,GAAS,OAAI,SAAAF,GACzC,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,iCCPlC,gGAyBME,EAAiBC,YAAU,CAC7BC,KAAM,SADaD,EAhBP,SAAC,GAA6B,IAA3BE,EAA0B,EAA1BA,aAAczB,EAAY,EAAZA,MAC7B,OACI,0BAAM0B,SAAUD,GACXf,YAAY,QAAS,QAAS,CAACO,KAAWR,KAC1CC,YAAY,WAAY,WAAY,CAACO,KAAWR,IAAO,CAAEkB,KAAM,aAC/DjB,YAAY,KAAM,aAAc,GAAID,IAAO,CAAEkB,KAAM,YAAa,eAChE3B,GAAS,yBAAKG,UAAWyB,IAAMC,kBAC3B7B,GAEL,6BACI,8CA4BD8B,uBAJS,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAME,KAAKD,UAGiB,CAAEE,WAA3BJ,EAjBD,SAACvB,GAIX,OAAIA,EAAMyB,OACC,kBAAC,IAAD,CAAUG,GAAI,cAElB,6BACH,qCACA,kBAACb,EAAD,CAAgBI,SARH,SAACU,GACd7B,EAAM2B,MAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG","file":"static/js/7.51c5b7f3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2iXrN\",\"error\":\"FormsControls_error__3nN0f\",\"formSummaryError\":\"FormsControls_formSummaryError__1orMD\"};","import React from 'react'\r\nimport styles from './FormsControls.module.css'\r\nimport { Field } from 'redux-form'\r\n\r\nconst FormsControl = ({ input, meta: {touched, error}, children }) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span> {`Error: ${error}`} </span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    const { input, meta, ...restProps } = props;\r\n    return <FormsControl {...props}> <textarea {...restProps} {...input} /> </FormsControl>\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const { input, meta, ...restProps } = props;\r\n    return <FormsControl {...props}> <input {...restProps} {...input} /> </FormsControl>\r\n}\r\n\r\nexport const CreateField = (placeholder, name, validators, component, props=[], text='') => (\r\n    <div>\r\n        <Field placeholder={placeholder} name={name}\r\n            validate={validators}\r\n            component={component}\r\n            {...props} /> {text}\r\n    </div>\r\n)","export const required = value => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n\r\n}\r\n\r\nexport const maxLengthCreator = maxLength => value => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n\r\n","import React from 'react'\r\nimport { reduxForm, Field } from 'redux-form'\r\nimport { Input, CreateField } from '../common/FormsControls/FormsControls'\r\nimport { required } from '../../utils/validators/validators'\r\nimport { connect } from 'react-redux'\r\nimport { login } from '../redux/auth-reducer'\r\nimport { Redirect } from 'react-router-dom'\r\nimport style from '../common/FormsControls/FormsControls.module.css'\r\n\r\nlet LoginForm = ({ handleSubmit, error }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {CreateField('Email', 'email', [required], Input)}\r\n            {CreateField('Password', 'password', [required], Input, { type: \"password\" })}\r\n            {CreateField(null, 'rememberMe', [], Input, { type: \"checkbox\"}, 'Remember me')}\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({ //hoc\r\n    form: 'login' //уникальное строковое имя\r\n    // форм много, им нужны индивидуальные имена, а стейт у всех них один\r\n})(LoginForm) //форма,вокруг которой создаем редакс-форм\r\n\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profiles\"} />\r\n    }\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} />\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, { login })(Login)"],"sourceRoot":""}